package com.test.sku.pds;

import java.net.*;
import java.text.SimpleDateFormat;
import java.io.*;
import java.util.*;

public class PDSClient {
	static Scanner kbd = new Scanner(System.in);
	static PDSVO pv = new PDSVO();
	static PDSResponse pResp = new PDSResponse();
	static PDSRequest prq = new PDSRequest();
	
	static List<PDSVO> list = new ArrayList<>();
	
	public static void main(String[] args) {
		Socket s = null;
		ObjectInputStream oin = null;
		ObjectOutputStream oos = null;
		try {
			 s = new Socket("localhost",1234);
			System.out.println("서버에 접속");
						
			InputStream in = s.getInputStream();
			 oin = new ObjectInputStream(in);
			OutputStream out = s.getOutputStream();
			 oos = new ObjectOutputStream(out); 
			
			while(true) {
			PDSResponse pResp = (PDSResponse)oin.readObject();
			System.out.println(pResp); 		// 파일 업로드(u), 목록보기(s), 상세보기(i),
											// 제목으로 검색(f), 수정(m), 삭제(d), 종료(x)
			String m = kbd.nextLine().trim();
			
			switch(m) {
				case "u": {	// 파일 업로드
					 System.out.println("파일명 작성자 설명:");
			    	 String input = kbd.nextLine();
			    	 String[] token = input.split("\\s+");
			    	 
			    	 if(!token[0].equals("") && token[0]!=null) {
						  boolean exist = FileIO.fileExist(token[0]);
						  if(exist) {	// 파일 존재 여부 확인 -> 성공시
								byte[] bt = FileIO.upload(token[0]);
								long len = FileIO.size(token[0]);
								prq = new PDSRequest();
								pv = new PDSVO();
								pv.fname = token[0];
								pv.author = token[1];
								pv.desc = token[2];
								pv.fdata = bt;
								pv.flen =len;
								
								prq.pv = pv;
								prq.upload=true;
								oos.writeObject(prq);
								oos.flush();								
								System.out.println("파일 업로드 완료");	
								break;								
							}else {
								System.out.println("파일이 존재하지 않습니다");
								break;
							}						  
					   }
					break;
				}
				case "s": {	// 목록보기
					prq = new PDSRequest();
			    	prq.showList = true;
			    	oos.writeObject(prq);
			    	oos.flush();
			     
			    	pResp = (PDSResponse)oin.readObject();
			    	list = pResp.pList;
			    	for(int i = 0; i < list.size(); i++) {
			    		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			    		String sdate = sdf.format(list.get(i).date);
			    		System.out.println("%d\t%-15s\t%s\t%d\t%s", list.get(i).no, list.get(i).fname,
			    				list.get(i).author, list.get(i).flen, list.get(i).sdate);
			    	}
					break;
				}
				case "i": {	// 상세보기
					prq = new PDSRequest();
			    	prq.showList = true;
			    	oos.writeObject(prq);
			    	oos.flush();
			     
			    	pResp = (PDSResponse)oin.readObject();
			    	list = pResp.pList;
			    	
			    	for(int i = 0; i < list.size(); i++) {
			    		System.out.println(list.get(i));
			    		String str = new String(list.get(i).fdata, "UTF-8");
			    		System.out.println(str);
			    	}
					break;
				}
				case "f": {	// 파일명으로 검색
					prq = new PDSRequest();
					
					System.out.println("파일명으로 검색: ");
			    	String fname = kbd.nextLine(); 
			    	
			    	prq.pv.fname = fname;
			    	prq.find = true;
			    	oos.writeObject(prq);
			    	oos.flush();
			    	 
			    	pResp = (PDSResponse)oin.readObject();
			    	System.out.println(pResp.pv);
			    	break;
				}
				case "m": {	// 파일 수정
					pv = new PDSVO();
					prq = new PDSRequest();	
					
					System.out.println("수정할 파일명:");
					String fname = kbd.nextLine(); 
				    System.out.println("설명 수정");
				    String desc = kbd.nextLine();
				   
				   	pv.fname = fname;
				   	pv.desc = desc;
				   	
				   	prq.pv = pv;
				   	prq.update = true;
				   	
				   	oos.writeObject(prq);
				   	oos.flush();
				   	System.out.println((PDSResponse)oin.readObject());
			    	break;
				}
				case "d": {	// 파일 삭제
					pv = new PDSVO();
					prq = new PDSRequest();
			    	System.out.println("삭제할 파일명");
			    	String fname = kbd.nextLine();
			    	pv.fname = fname;
			    	prq.pv = pv;
			    	prq.delete = true;
			    	oos.writeObject(prq);
			    	oos.flush();
			    	System.out.println((PDSResponse)oin.readObject());
			    	break;
				}
				case "x": {
					System.out.println("프로그램 종료");
					return;
				}
				default: System.err.println("잘못된 입력입니다."); break;
			}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
	        // 자원 정리
	        try {
	            if (oin != null) oin.close();
	            if (oos != null) oos.close();
	            if (s != null) s.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }

	}	// end of main
}